name: Build and Release

on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 0 1 */1 *'

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    container:
      image: fedora:latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      date: ${{ steps.date.outputs.date }}

    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo dnf install -y gcc make wget unzip rpm-build mingw64-gcc

    - name: Build Linux version
      run: |
        gcc *.c -o zork
        mkdir -p zork-linux
        cp zork dtextc.dat zork-linux/
        tar -czf zork-linux.tar.gz zork-linux/

    - name: Build Windows version
      run: |
        x86_64-w64-mingw32-gcc *.c -o zork_windows.exe
        mkdir -p win_package
        cp zork_windows.exe dtextc.dat win_package/
        cd win_package
        zip -r ../zork-windows.zip .

    - name: Build MS-DOS version
      run: |
        wget https://github.com/andrewwutw/build-djgpp/releases/download/v3.3/djgpp-linux64-gcc1210.tar.bz2
        tar -xf djgpp-linux64-gcc1210.tar.bz2 -C /usr/local/
        export PATH=$PATH:/usr/local/djgpp/bin
        /usr/local/djgpp/bin/i586-pc-msdosdjgpp-gcc *.c -o ZORK.EXE
        wget http://na.mirror.garr.it/mirrors/djgpp/current/v2misc/csdpmi7b.zip
        unzip -u csdpmi7b.zip
        mkdir -p dos_package
        cp ZORK.EXE dtextc.dat dos_package/
        cp bin/CWSDPMI.EXE dos_package/
        cd dos_package
        zip -r ../zork-dos.zip .

    - name: Generate release date
      id: date
      run: |
        echo "date=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT
        echo "unique_id=$(date +'%H%M%S')" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.date.outputs.date }}-${{ steps.date.outputs.unique_id }}
        release_name: Release ${{ steps.date.outputs.date }}-${{ steps.date.outputs.unique_id }}
        draft: false
        prerelease: false

    - name: Upload Linux Package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./zork-linux.tar.gz
        asset_name: zork-${{ steps.date.outputs.date }}-linux.tar.gz
        asset_content_type: application/gzip

    - name: Upload Windows Package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./zork-windows.zip
        asset_name: zork-${{ steps.date.outputs.date }}-windows.zip
        asset_content_type: application/zip
    
    - name: Upload DOS Package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./zork-dos.zip
        asset_name: zork-${{ steps.date.outputs.date }}-dos.zip
        asset_content_type: application/zip
